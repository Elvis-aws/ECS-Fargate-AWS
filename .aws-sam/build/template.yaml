AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'ECS/VPC Repository

  '
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Private1:
      CIDR: 10.0.1.0/24
    Private2:
      CIDR: 10.0.2.0/24
    Public1:
      CIDR: 10.0.3.0/24
    Public2:
      CIDR: 10.0.4.0/24
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-s3bucket
      AccessControl: Private
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-vpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public1
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-public-subnet-1
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      VpcId:
        Ref: MyVPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public2
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-public-subnet-2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      VpcId:
        Ref: MyVPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private1
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-private-subnet-1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      VpcId:
        Ref: MyVPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private2
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-private-subnet-2
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-alb
      Scheme: internet-facing
      SecurityGroups:
      - Ref: ALBSecurityGroup
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      Type: application
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - TargetGroupArn:
          Ref: ALBTargetGroup
        Type: forward
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Ref: MyVPC
      Name:
        Fn::Sub: ${AWS::StackName}-targetGroup
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: '200'
      TargetType: ip
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-alb-security-group
      GroupDescription: Allow HTTP Only.
      VpcId:
        Ref: MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
      - Ref: EndpointSecurityGroup
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.logs
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      VpcEndpointType: Interface
      VpcId:
        Ref: MyVPC
  ECRDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: MyVPC
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
      - Ref: EndpointSecurityGroup
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      VpcEndpointType: Interface
      VpcId:
        Ref: MyVPC
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: MyVPC
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
      - Ref: EndpointSecurityGroup
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      VpcEndpointType: Interface
      VpcId:
        Ref: MyVPC
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: MyVPC
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: '*'
          Action:
          - s3:*
          Resource:
          - Fn::GetAtt:
            - S3Bucket
            - Arn
          - Fn::Sub: ${S3Bucket.Arn}/*
      RouteTableIds:
      - Ref: PrivateRouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcId:
        Ref: MyVPC
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVPC
  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  NatGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NatGatewayAttachment
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVPC
      InternetGatewayId:
        Ref: InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS traffic from the VPC
      VpcId:
        Ref: MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId:
          Ref: ContainerSecurityGroup
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Ref: ContainerSecurityGroup
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        Fn::Sub: ${AWS::StackName}-containersecuritygroup
      GroupDescription: Allow HTTP from ALBSecurityGroup. Security group for containers
      VpcId:
        Ref: MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
Outputs:
  ExportBucket:
    Value:
      Ref: S3Bucket
    Export:
      Name: ExportBucket
  ExportVpc:
    Value:
      Ref: MyVPC
    Export:
      Name: ExportVpc
  ExportPrivSubnet1:
    Value:
      Ref: PrivateSubnet1
    Export:
      Name: ExportPrivSubnet1
  ExportPrivSubnet2:
    Value:
      Ref: PrivateSubnet2
    Export:
      Name: ExportPrivSubnet2
  ExportAlb:
    Value:
      Ref: ALB
    Export:
      Name: ExportAlb
  ExportAlbListener:
    Value:
      Ref: ALBListener
    Export:
      Name: ExportAlbListener
  ExportAlbTargetGroup:
    Value:
      Ref: ALBTargetGroup
    Export:
      Name: ExportAlbTargetGroup
  ExportContainerSg:
    Value:
      Ref: ContainerSecurityGroup
    Export:
      Name: ExportContainerSg
