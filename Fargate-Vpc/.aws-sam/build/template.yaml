AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'ECS Fargate

  '
Parameters:
  ProjectName:
    Type: String
    Default: ECS-Fargate-VPC
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Private1:
      CIDR: 10.0.0.0/24
    Private2:
      CIDR: 10.0.1.0/24
    Public1:
      CIDR: 10.0.2.0/24
    Public2:
      CIDR: 10.0.3.0/24
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-vpc
      - Key: Project
        Value:
          Ref: ProjectName
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: MyVPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public1
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-public-subnet-1
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      VpcId:
        Ref: MyVPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public2
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-public-subnet-2
      - Key: Project
        Value:
          Ref: ProjectName
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      VpcId:
        Ref: MyVPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private1
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-private-subnet-1
      - Key: Project
        Value:
          Ref: ProjectName
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      VpcId:
        Ref: MyVPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private2
        - CIDR
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${AWS::StackName}-private-subnet-2
      - Key: Project
        Value:
          Ref: ProjectName
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        Fn::Sub: ${AWS::StackName}-ecrrepository
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-alb
      Scheme: internet-facing
      SecurityGroups:
      - Ref: ALBSecurityGroup
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      Type: application
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: '0.0.0.0/0'
      VpcId:
        Ref: MyVPC
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: ALBTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: ALB
      Port: 80
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Ref: MyVPC
      Name:
        Fn::Sub: ${AWS::StackName}-targetGroup
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 3
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: '200'
      TargetType: ip
  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
      - Ref: EndpointSecurityGroup
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.logs
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      VpcEndpointType: Interface
      VpcId:
        Ref: MyVPC
  ECRDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: MyVPC
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
      - Ref: EndpointSecurityGroup
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      VpcEndpointType: Interface
      VpcId:
        Ref: MyVPC
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: MyVPC
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
      - Ref: EndpointSecurityGroup
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      VpcEndpointType: Interface
      VpcId:
        Ref: MyVPC
  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS traffic from the VPC
      VpcId:
        Ref: MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp:
          Fn::GetAtt:
          - MyVPC
          - CidrBlock
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: MyVPC
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: '*'
          Action:
          - s3:*
          Resource:
          - Fn::GetAtt:
            - S3Bucket
            - Arn
          - Fn::Sub: ${S3Bucket.Arn}/*
      RouteTableIds:
      - Ref: PrivateRouteTable
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcId:
        Ref: MyVPC
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-s3bucket
      AccessControl: Private
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: NatGateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NatGatewayAttachment
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
  NatGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyVPC
      InternetGatewayId:
        Ref: InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
