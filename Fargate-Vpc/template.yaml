AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ECS Fargate

Parameters:
  ProjectName:
    Type: String
    Default: ECS-Fargate-VPC

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    Private1:
      CIDR: '10.0.0.0/24'
    Private2:
      CIDR: '10.0.1.0/24'
    Public1:
      CIDR: '10.0.2.0/24'
    Public2:
      CIDR: '10.0.3.0/24'
#    Public1:
#      CIDR: '10.0.4.0/24'
Resources:
############################################################################################
################################### VPC Config Start #######################################

##############################################
###################### VPC ###################
##############################################
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [ 'SubnetConfig', 'VPC', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
        - Key: Project
          Value: !Ref ProjectName
##############################################
############ Public Subnets #################
##############################################
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !FindInMap [ 'SubnetConfig', 'Public1', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref MyVPC
      CidrBlock: !FindInMap [ 'SubnetConfig', 'Public2', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2
        - Key: Project
          Value: !Ref ProjectName
##############################################
############ Private Subnets #################
##############################################
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref MyVPC
      CidrBlock: !FindInMap [ 'SubnetConfig', 'Private1', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref MyVPC
      CidrBlock: !FindInMap [ 'SubnetConfig', 'Private2', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2
        - Key: Project
          Value: !Ref ProjectName
##############################################
############### ECR Repository ###############
##############################################
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-ecrrepository
##############################################
########## Application Load Balancer #########
##############################################
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application
##############################################
############# AlB Security Group #############
##############################################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-alb-security-group
      GroupDescription: Allow HTTP Only.
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
##############################################
################ Alb Listener ################
##############################################
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
##############################################
############## ALB Target Group ##############
##############################################
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC
      Name: !Sub ${AWS::StackName}-targetGroup
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      Matcher:
        HttpCode: '200'
      TargetType: ip
##############################################
########## CloudWatchLogs Endpoint ###########
##############################################
  CloudWatchLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref MyVPC
##############################################
############## ECR DKR Endpoint ##############
##############################################
  ECRDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: MyVPC
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref MyVPC
##############################################
############## ECR API Endpoint ##############
##############################################
  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: MyVPC
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType: Interface
      VpcId: !Ref MyVPC
##############################################
################ S3 Endpoint #################
##############################################
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: MyVPC
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:*
            Resource:
              - !GetAtt S3Bucket.Arn
              - !Sub "${S3Bucket.Arn}/*"
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref MyVPC
##############################################
################## S3 Bucket #################
##############################################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-s3bucket
      AccessControl: Private
##############################################
################ Route Tables ################
##############################################
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
##############################################
################ Internet Route ##############
##############################################
  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
##############################################
################ Nate Gateway ################
##############################################
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAttachment.AllocationId
      SubnetId: !Ref PublicSubnet1
##############################################
########### Nate Gateway Attachment ##########
##############################################
  NatGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
##############################################
############# Gateway Attachment #############
##############################################
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway
##############################################
############## Internet Gateway ##############
##############################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
##############################################
######### Subnet Association #########
##############################################
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
##############################################
########### Endpoint Security Group ##########
##############################################
  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTPS traffic from the VPC'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ServiceSecurityGroup
############################################################################################
################################# Fargate Config Start #####################################

##############################################
########### Service Security Group ##########
##############################################
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-servicesecuritygroup
      GroupDescription: Allow HTTP from ALBSecurityGroup.
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
##############################################
################# Log Group ##################
##############################################
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-log-group
##############################################
################### Cluster ##################
##############################################
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster
##############################################
######## Fargate Task Execution Role #########
##############################################
  FargateTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
##############################################
############## Task Definition ###############
##############################################
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !Ref FargateTaskExecutionRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-container
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MyRepository}:latest
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${AWS::StackName}-log-stream
##############################################
################## Task Role #################
##############################################
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Sub ${AWS::StackName}-container
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      ServiceName: !Sub ${AWS::StackName}-service
      TaskDefinition: !Ref TaskDefinition
##############################################
################## Task Role #################
##############################################
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
##############################################
########### Service Scalab leTarget ##########
##############################################
  ServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - Service
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Select [ 5, !Split [ ":", !Ref Service ] ]
      RoleARN: !GetAtt ServiceTaskScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
##############################################
########### Service Scaling Policy ###########
##############################################
  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn:
      - Service
      - ServiceScalableTarget
    Properties:
      PolicyName: ServiceScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 0
        ScaleOutCooldown: 0
        TargetValue: 0.01
##############################################
########## Service Task Scaling Role #########
##############################################
  ServiceTaskScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

################## Out Put ###################
##############################################